import Cocoa

extension SharedConfiguration {

	static let configKeys: [String] = [
		"maximumBlankLines",
		"lineLength",
		"tabWidth",
		"indentation",
		"respectsExistingLineBreaks",
		"lineBreakBeforeControlFlowKeywords",
		"lineBreakBeforeEachArgument",
		"lineBreakBeforeEachGenericRequirement",
		"prioritizeKeepingFunctionOutputTogether",
		"indentConditionalCompilationBlocks",
		"lineBreakAroundMultilineExpressionChainComponents",
		"fileScopedDeclarationPrivacy",
		"indentSwitchCaseLabels",
	]

	static let ruleKeys: [String] = [
		"AllPublicDeclarationsHaveDocumentation",
		"AlwaysUseLowerCamelCase",
		"AmbiguousTrailingClosureOverload",
		"BeginDocumentationCommentWithOneLineSummary",
		"DoNotUseSemicolons",
		"DontRepeatTypeInStaticProperties",
		"FileScopedDeclarationPrivacy",
		"FullyIndirectEnum",
		"GroupNumericLiterals",
		"IdentifiersMustBeASCII",
		"NeverForceUnwrap",
		"NeverUseForceTry",
		"NeverUseImplicitlyUnwrappedOptionals",
		"NoAccessLevelOnExtensionDeclaration",
		"NoBlockComments",
		"NoCasesWithOnlyFallthrough",
		"NoEmptyTrailingClosureParentheses",
		"NoLabelsInCasePatterns",
		"NoLeadingUnderscores",
		"NoParensAroundConditions",
		"NoVoidReturnOnFunctionSignature",
		"OneCasePerLine",
		"OneVariableDeclarationPerLine",
		"OnlyOneTrailingClosureArgument",
		"OrderedImports",
		"ReturnVoidInsteadOfEmptyTuple",
		"UseEarlyExits",
		"UseLetInEveryBoundCaseVariable",
		"UseShorthandTypeNames",
		"UseSingleLinePropertyGetter",
		"UseSynthesizedInitializer",
		"UseTripleSlashForDocumentationComments",
		"UseWhereClausesInForLoops",
		"ValidateDocumentationComments",
	]

	static func label(for key: String) -> String {
		let pair: [String: String] = [
			/* CONFIG */
			"maximumBlankLines": "Maximum Blank Lines",
			"lineLength": "Line Length",
			"tabWidth": "Tab Width",
			"indentation": "Indentation",
			"respectsExistingLineBreaks": "Respects Existing Line Breaks",
			"lineBreakBeforeControlFlowKeywords": "Line Break Before Control Flow Keywords",
			"lineBreakBeforeEachArgument": "Line Break Before Each Argument",
			"lineBreakBeforeEachGenericRequirement": "Line Break Before Each Generic Requirement",
			"prioritizeKeepingFunctionOutputTogether": "Prioritize Keeping Function Output Together",
			"indentConditionalCompilationBlocks": "Indent Conditional Compilation Blocks",
			"lineBreakAroundMultilineExpressionChainComponents": "Line Break Around Multiline Expression Chain Components",
			"fileScopedDeclarationPrivacy": "File Scoped Declaration Privacy",
			"indentSwitchCaseLabels": "Indent Switch Case Labels",
			/* RULES */
			"AllPublicDeclarationsHaveDocumentation": "All Public Declarations Have Documentation",
			"AlwaysUseLowerCamelCase": "Always Use Lower CamelCase",
			"AmbiguousTrailingClosureOverload": "Ambiguous Trailing Closure Overload",
			"BeginDocumentationCommentWithOneLineSummary": "Begin Documentation Comment With One Line Summary",
			"DoNotUseSemicolons": "Do Not Use Semicolons",
			"DontRepeatTypeInStaticProperties": "Dont Repeat Type In Static Properties",
			"FileScopedDeclarationPrivacy": "File Scoped Declaration Privacy",
			"FullyIndirectEnum": "Fully Indirect Enum",
			"GroupNumericLiterals": "Group Numeric Literals",
			"IdentifiersMustBeASCII": "Identifiers Must Be ASCII",
			"NeverForceUnwrap": "Never Force Unwrap",
			"NeverUseForceTry": "Never Use Force Try",
			"NeverUseImplicitlyUnwrappedOptionals": "Never Use Implicitly Unwrapped Optionals",
			"NoAccessLevelOnExtensionDeclaration": "NoAccess Level On Extension Declaration",
			"NoBlockComments": "No Block Comments",
			"NoCasesWithOnlyFallthrough": "No Cases With Only Fallthrough",
			"NoEmptyTrailingClosureParentheses": "No Empty Trailing Closure Parentheses",
			"NoLabelsInCasePatterns": "No Labels In Case Patterns",
			"NoLeadingUnderscores": "No Leading Underscores",
			"NoParensAroundConditions": "No Parens Around Conditions",
			"NoVoidReturnOnFunctionSignature": "No Void Return On Function Signature",
			"OneCasePerLine": "One Case Per Line",
			"OneVariableDeclarationPerLine": "One Variable Declaration Per Line",
			"OnlyOneTrailingClosureArgument": "Only One Trailing Closure Argument",
			"OrderedImports": "Ordered Imports",
			"ReturnVoidInsteadOfEmptyTuple": "Return Void Instead Of EmptyTuple",
			"UseEarlyExits": "UseEarlyExits",
			"UseLetInEveryBoundCaseVariable": "Use Let In Every Bound Case Variable",
			"UseShorthandTypeNames": "Use Shorthand Type Names",
			"UseSingleLinePropertyGetter": "Use Single Line Property Getter",
			"UseSynthesizedInitializer": "Use Synthesized Initializer",
			"UseTripleSlashForDocumentationComments": "Use Triple Slash For Documentation Comments",
			"UseWhereClausesInForLoops": "Use Where Clauses In For Loops",
			"ValidateDocumentationComments": "Validate Documentation Comments",
		]
		if let label = pair[key] {
			return label
		}
		return ""
	}
}
